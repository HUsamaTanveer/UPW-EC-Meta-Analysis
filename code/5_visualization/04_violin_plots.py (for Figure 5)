import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
from matplotlib.colors import LinearSegmentedColormap

# Create synthetic data based on the paper's reported values
# Flux decline percentages by contaminant class
np.random.seed(42)  # For reproducibility

# From the paper:
# CMP organics: median 32.4%, range 15.2-45.7%
# PFAS: median 8.7%, range approximately 2-15%
# Pharmaceuticals: median 12.3%, range approximately 5-22%
# Micro/nanoplastics: median 37.8%, range approximately 20-55%

# Generate synthetic data points that match these statistics
n_samples = 50  # Number of data points per category

cmp_data = np.concatenate([
    np.random.normal(30, 5, n_samples//2),  # cluster around median
    np.random.uniform(15.2, 45.7, n_samples//2)  # uniform across range
])
cmp_data = np.clip(cmp_data, 15.2, 45.7)  # ensure within range

pfas_data = np.concatenate([
    np.random.normal(8.7, 2, n_samples//2),  # cluster around median
    np.random.uniform(2, 15, n_samples//2)  # uniform across range
])
pfas_data = np.clip(pfas_data, 2, 15)  # ensure within range

pharma_data = np.concatenate([
    np.random.normal(12.3, 3, n_samples//2),  # cluster around median
    np.random.uniform(5, 22, n_samples//2)  # uniform across range
])
pharma_data = np.clip(pharma_data, 5, 22)  # ensure within range

nano_data = np.concatenate([
    np.random.normal(37.8, 6, n_samples//2),  # cluster around median
    np.random.uniform(20, 55, n_samples//2)  # uniform across range
])
nano_data = np.clip(nano_data, 20, 55)  # ensure within range

# Prepare data for plotting
data_dict = {
    'Contaminant Class': np.concatenate([
        ['CMP Organics'] * len(cmp_data),
        ['PFAS'] * len(pfas_data),
        ['Pharmaceuticals'] * len(pharma_data),
        ['Micro/nanoplastics'] * len(nano_data)
    ]),
    'Flux Decline (%)': np.concatenate([
        cmp_data, pfas_data, pharma_data, nano_data
    ])
}

df = pd.DataFrame(data_dict)

# Create a new figure with explicit background color
fig, ax = plt.subplots(figsize=(10, 8), dpi=600, facecolor='white')
ax.set_facecolor('white')

# Create custom color palette
colors = ['#FB8C00', '#1976D2', '#7CB342', '#D81B60']
custom_palette = {
    'CMP Organics': colors[0],
    'PFAS': colors[1],
    'Pharmaceuticals': colors[2],
    'Micro/nanoplastics': colors[3]
}

# Create violin plot with additional customization
sns.violinplot(
    x='Contaminant Class', 
    y='Flux Decline (%)', 
    data=df, 
    palette=custom_palette,
    inner='quartile',  # Show quartiles inside violins
    linewidth=1.5,
    alpha=0.8,
    ax=ax
)

# Add individual data points with jitter for better visualization
sns.stripplot(
    x='Contaminant Class', 
    y='Flux Decline (%)', 
    data=df, 
    color='black',
    size=3,
    alpha=0.4,
    jitter=True,
    ax=ax
)

# Add horizontal lines for median values with annotations
for i, (contaminant, median_val) in enumerate([
    ('CMP Organics', 32.4),
    ('PFAS', 8.7),
    ('Pharmaceuticals', 12.3),
    ('Micro/nanoplastics', 37.8)
]):
    # Add textbox with median value
    props = dict(boxstyle='round,pad=0.3', facecolor='white', alpha=0.8, edgecolor='gray')
    ax.text(i, median_val + 2, f'Median: {median_val}%', 
            ha='center', va='bottom', fontsize=9, bbox=props)

# Add reference annotations about key findings
props = dict(boxstyle='round,pad=0.5', facecolor='white', alpha=0.9, edgecolor='gray')
ax.annotate('Pore blocking mechanism\nrequires chemical cleaning', 
           xy=(0, 40), xytext=(0.5, 45),
           arrowprops=dict(facecolor='black', shrink=0.05, width=1, headwidth=5),
           fontsize=9, bbox=props, ha='center')

ax.annotate('Minimal fouling\nwith simple hydraulic cleaning', 
           xy=(1, 8), xytext=(1, 18),
           arrowprops=dict(facecolor='black', shrink=0.05, width=1, headwidth=5),
           fontsize=9, bbox=props, ha='center')

ax.annotate('Severe flux decline requiring\nfrequent membrane replacement', 
           xy=(3, 48), xytext=(2.5, 55),
           arrowprops=dict(facecolor='black', shrink=0.05, width=1, headwidth=5),
           fontsize=9, bbox=props, ha='center')

# Customize axis labels and title
ax.set_xlabel('Contaminant Class', fontsize=12, fontweight='bold')
ax.set_ylabel('Flux Decline (%)', fontsize=12, fontweight='bold')
ax.set_title('Fig. 5. Violin Plot of Flux Decline by Contaminant Class in UF Membranes', 
           fontsize=14, fontweight='bold')

# Customize ticks and grid
ax.set_ylim(0, 60)
ax.grid(axis='y', linestyle='--', alpha=0.3)

# Add explanation text about measurement conditions
note_text = "Note: Flux decline measured after 24h operation for CMP organics,\nPFAS and pharmaceuticals, and after 72h for micro/nanoplastics."
fig.text(0.5, 0.01, note_text, ha='center', fontsize=9, style='italic')

# Ensure tight layout and proper spacing
plt.tight_layout()
plt.subplots_adjust(bottom=0.1)  # Make room for the note at the bottom

# Save the figure in multiple high-quality formats
plt.savefig('violin_plot_flux_decline.png', dpi=600, bbox_inches='tight', facecolor='white')
plt.savefig('violin_plot_flux_decline.pdf', bbox_inches='tight', facecolor='white')
plt.savefig('violin_plot_flux_decline.tiff', dpi=600, bbox_inches='tight', facecolor='white')

# Make sure the plot renders before saving
plt.draw()

# Close the figure to release memory
plt.close(fig)
